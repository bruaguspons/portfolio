---
import Button from "../Button.astro";
import ContactInput from "./ContactInput.tsx";
import type { InputError } from "./types";
import { doSubmit, getInputError } from "./utils";

interface Field {
    id: string;
    label: string;
    autocomplete: string;
    type: "textarea" | "email" | null | undefined;
    required: boolean | null;
    errors?: InputError;
}

interface Props {
    fields: Field[];
    submitError: string;
    fieldsError: string;
}

const { fields, submitError, fieldsError } = Astro.props;

const errors = { email: "", message: "" };
let generalErrors = "";
if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const message = (data.get("message") as string) ?? "";
        const email = (data.get("email") as string) ?? "";
        const name = (data.get("name") as string) ?? "";
        const lastName = (data.get("lastName") as string) ?? "";

        for (const field of fields) {
            if (field.id === "email")
                errors.email = getInputError("email", email, field.errors);
            if (field.id === "message")
                errors.message = getInputError(
                    "textarea",
                    message,
                    field.errors,
                );
        }

        console.log({ errors });

        const hasErrors = Object.values(errors).some((msg) => msg);

        console.log({ hasErrors });

        if (!hasErrors) {
            data.set("message", JSON.stringify({ message, name, lastName }));

            const dataJson = {
                email: email,
                message: JSON.stringify({
                    name,
                    lastName,
                    message,
                }),
            };

            console.log({ dataJson });
            const ok = await doSubmit(JSON.stringify(dataJson));
            if (!ok) {
                generalErrors = submitError;
            }
        } else {
            generalErrors = fieldsError;
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}
---

<form method="POST" class="flex flex-col items-center gap-4 w-full" novalidate>
    {
        fields.map((field) => (
            <ContactInput
                id={field.id}
                label={field.label}
                autocomplete={field.autocomplete}
                type={field.type}
                required={field.required}
                errors={field.errors}
                client:load
            />
        ))
    }

    {generalErrors && <span class="text-red-500 my-2">{generalErrors}</span>}

    <Button type="submit" className="cursor-pointer my-4">Send</Button>
</form>
