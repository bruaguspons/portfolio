---
import { getRandomPosFromSector } from "@/utils";
import type { PosShapesType, ShapesType } from "../types";

interface Props {
    shape?: ShapesType;
    deg?: number;
    pos?: PosShapesType;
}

let { shape, pos } = Astro.props;
const [posX, posY] = getRandomPosFromSector(pos);
---

<div
    class="js-shape bg-gradient-to-br from-purple-500 to-red-400 dark:to-blue-500 absolute oscillate"
    style={{
        clipPath: shape,
        // transform: `rotate(${deg}deg);`,
        top: `${posY}%;`,
        left: `${posX}%;`,
        display: "none",
    }}
>
</div>

<script>
    import { getRandomShape, getRandomSize, getRandomPos } from "@/utils";

    const handleSwap = () => {
        const shapes: NodeListOf<HTMLElement> =
            document.querySelectorAll(".js-shape");

        shapes.forEach((shape) => {
            if (!shape.style.clipPath)
                shape.style.clipPath = getRandomShape(undefined);

            // Random Move
            const randX = Math.random() * 5 + 2;
            const randY = Math.random() * 5 + 2;
            const randDelay = Math.floor(Math.random() * 5 + 5);
            shape.style.setProperty("--randX", randX.toString());
            shape.style.setProperty("--randY", randY.toString());
            shape.style.setProperty("--randDelay", `-${randDelay}s`);

            // Random Size
            const randomSize = getRandomSize();
            shape.style.width = `${randomSize}rem`;
            shape.style.height = `${randomSize}rem`;

            // Random Pos
            if (!shape.style.top && !shape.style.left) {
                const [posX, posY] = getRandomPos();
                shape.style.top = `${posY}%`;
                shape.style.left = `${posX}%`;
            }

            shape.style.display = "";
        });
    };

    handleSwap();
    document.addEventListener("astro:after-swap", () => {
        handleSwap();
    });
</script>

<style>
    .oscillate {
        animation: oscillation 7s ease-in-out infinite;
        animation-delay: var(--randDelay);
    }

    @keyframes oscillation {
        0%,
        100% {
            transform: translate(0, 0);
        }
        25% {
            transform: translate(
                calc(-3px * var(--randX)),
                calc(3px * var(--randY))
            );
        }
        50% {
            transform: translate(
                calc(3px * var(--randX)),
                calc(-3px * var(--randY))
            );
        }
        75% {
            transform: translate(
                calc(-3px * var(--randX)),
                calc(-3px * var(--randY))
            );
        }
    }
</style>
