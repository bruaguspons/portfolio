---
interface Props {
    gradientName: string;
    className?: string;
    from_color: string;
    to_color: string;
}

const { gradientName, className, from_color, to_color } = Astro.props;
---

<button
    aria-label="Menu settings"
    class={`h-full aspect-square p-2 btn-settings ${className}`}
    data-open="false"
>
    <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
        class={`gradient-bg-${gradientName}`}
    >
        <defs>
            <linearGradient id={gradientName}>
                <stop offset="5%" stop-color={from_color}></stop>
                <stop offset="95%" stop-color={to_color}></stop>
            </linearGradient>
        </defs>
        <path
            d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z"
        ></path>
        <path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0"></path>
    </svg>
</button>

<script>
    import {
        hideGreyPanel,
        showGreyPanel,
        showSettingsPanel,
        hideSettingsPanel,
        hideLinksPanel,
    } from "@/utils";
    const handleSwap = () => {
        const button: NodeListOf<HTMLElement> =
            document.querySelectorAll(".btn-settings");
        if (button.length) {
            button.forEach((elem) =>
                elem.addEventListener("click", () => {
                    const isOpen = elem.dataset.open;
                    if (isOpen === "false") {
                        hideLinksPanel();
                        showGreyPanel(25);
                        showSettingsPanel();
                    } else {
                        hideGreyPanel();
                        hideSettingsPanel();
                    }
                }),
            );
        }
    };

    handleSwap();
    document.addEventListener("astro:after-swap", () => {
        handleSwap();
    });
</script>

<script define:vars={{ gradientName }}>
    const handleEvent = (elem, start, isMobile) => {
        if (start) {
            const paths = elem.querySelectorAll("path");
            if (paths.length)
                paths.forEach(
                    (path) => (path.style.stroke = `url(#${gradientName})`),
                );
            changeSpan(elem, start, isMobile);
            return;
        }
        const paths = elem.querySelectorAll("path");
        if (paths.length)
            paths.forEach((path) => (path.style.stroke = `currentColor`));

        changeSpan(elem, start, isMobile);
    };

    const handleSwap = () => {
        const isMobile = window.innerWidth <= 640;
        document
            .querySelectorAll(`.gradient-bg-${gradientName}`)
            .forEach((elem) => {
                if (isMobile) {
                    elem.closest("button").addEventListener(
                        "touchstart",
                        () => handleEvent(elem, true, isMobile),
                        { passive: true },
                    );
                    elem.closest("button").addEventListener(
                        "touchmove",
                        () => handleEvent(elem, false, isMobile),
                        { passive: true },
                    );
                    elem.closest("button").addEventListener(
                        "touchend",
                        () => handleEvent(elem, false, isMobile),
                        { passive: true },
                    );
                } else {
                    elem.closest("button").addEventListener(
                        "mouseenter",
                        () => handleEvent(elem, true, isMobile),
                        { passive: true },
                    );
                    elem.closest("button").addEventListener(
                        "mouseleave",
                        () => handleEvent(elem, false, isMobile),
                        { passive: true },
                    );
                }
            });
    };

    window.addEventListener("resize", handleSwap);
    handleSwap();
    document.addEventListener("astro:after-swap", () => {
        window.addEventListener("resize", handleSwap);
        handleSwap();
    });
</script>
