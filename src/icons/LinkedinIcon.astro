---
import IconsBgGradient from "./IconsBgGradient.astro";

interface Props {
    gradientName: string;
    desc?: string;
    href?: string;
    target?: string;
    className?: string;
    from_color?: string;
    to_color?: string;
}

const { gradientName, desc, href, target, className, from_color, to_color } =
    Astro.props;
---

<IconsBgGradient className={className} desc={desc} href={href} target={target}>
    <svg
        class={`gradient-bg-${gradientName} ${className}`}
        stroke="currentColor"
        fill="currentColor"
        stroke-width="0"
        viewBox="0 0 1024 1024"
        xmlns="http://www.w3.org/2000/svg"
    >
        <defs>
            <linearGradient id={gradientName}>
                <stop offset="5%" stop-color={from_color}></stop>
                <stop offset="95%" stop-color={to_color}></stop>
            </linearGradient>
        </defs>
        <path
            d="M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM349.3 793.7H230.6V411.9h118.7v381.8zm-59.3-434a68.8 68.8 0 1 1 68.8-68.8c-.1 38-30.9 68.8-68.8 68.8zm503.7 434H675.1V608c0-44.3-.8-101.2-61.7-101.2-61.7 0-71.2 48.2-71.2 98v188.9H423.7V411.9h113.8v52.2h1.6c15.8-30 54.5-61.7 112.3-61.7 120.2 0 142.3 79.1 142.3 181.9v209.4z"
        ></path></svg
    >
</IconsBgGradient>
<script define:vars={{ gradientName }}>
    const handleEvent = (elem, start, isMobile) => {
        const changeSpan = (elem, start, isMobile) => {
            if (!isMobile) return;

            const span = elem.closest("a")?.querySelector("span");
            console.log(span);
            if (start) {
                span.classList.add(
                    "from-purple-500",
                    "to-blue-500",
                    "text-transparent",
                );
                return;
            }
            span.classList.remove(
                "from-purple-500",
                "to-blue-500",
                "text-transparent",
            );
        };
        if (start) {
            const paths = elem.querySelectorAll("path");
            if (paths.length)
                paths.forEach(
                    (path) => (path.style.fill = `url(#${gradientName})`),
                );
            changeSpan(elem, start, isMobile);
            return;
        }
        const paths = elem.querySelectorAll("path");
        if (paths.length)
            paths.forEach((path) => (path.style.fill = `currentColor`));

        changeSpan(elem, start, isMobile);
    };

    const handleSwap = () => {
        const isMobile = window.innerWidth <= 640;
        document
            .querySelectorAll(`.gradient-bg-${gradientName}`)
            .forEach((elem) => {
                if (isMobile) {
                    elem.closest("a").addEventListener(
                        "touchstart",
                        () => handleEvent(elem, true, isMobile),
                        { passive: true },
                    );
                    elem.closest("a").addEventListener(
                        "touchmove",
                        () => handleEvent(elem, false, isMobile),
                        { passive: true },
                    );
                    elem.closest("a").addEventListener(
                        "touchend",
                        () => handleEvent(elem, false, isMobile),
                        { passive: true },
                    );
                } else {
                    elem.closest("a").addEventListener(
                        "mouseenter",
                        () => handleEvent(elem, true, isMobile),
                        { passive: true },
                    );
                    elem.closest("a").addEventListener(
                        "mouseleave",
                        () => handleEvent(elem, false, isMobile),
                        { passive: true },
                    );
                }
            });
    };

    window.addEventListener("resize", handleSwap);
    handleSwap();
    document.addEventListener("astro:after-swap", () => {
        window.addEventListener("resize", handleSwap);
        handleSwap();
    });
</script>
